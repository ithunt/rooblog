// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.iancodes.rooblog.rest;

import com.iancodes.rooblog.model.BlogPost;
import com.iancodes.rooblog.model.BlogUser;
import com.iancodes.rooblog.rest.BlogPostController;
import com.iancodes.rooblog.service.BlogPostService;
import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect BlogPostController_Roo_Controller_Json {
    
    @Autowired
    BlogPostService BlogPostController.blogPostService;
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> BlogPostController.showJson(@PathVariable("id") Long id) {
        BlogPost blogPost = blogPostService.findBlogPost(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (blogPost == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(blogPost.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> BlogPostController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<BlogPost> result = blogPostService.findAllBlogPosts();
        return new ResponseEntity<String>(BlogPost.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> BlogPostController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        BlogPost blogPost = BlogPost.fromJsonToBlogPost(json);
        blogPostService.saveBlogPost(blogPost);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+blogPost.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> BlogPostController.createFromJsonArray(@RequestBody String json) {
        for (BlogPost blogPost: BlogPost.fromJsonArrayToBlogPosts(json)) {
            blogPostService.saveBlogPost(blogPost);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> BlogPostController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        BlogPost blogPost = BlogPost.fromJsonToBlogPost(json);
        blogPost.setId(id);
        if (blogPostService.updateBlogPost(blogPost) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> BlogPostController.deleteFromJson(@PathVariable("id") Long id) {
        BlogPost blogPost = blogPostService.findBlogPost(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (blogPost == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        blogPostService.deleteBlogPost(blogPost);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByAuthor", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> BlogPostController.jsonFindBlogPostsByAuthor(@RequestParam("author") BlogUser author) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(BlogPost.toJsonArray(BlogPost.findBlogPostsByAuthor(author).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCreated", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> BlogPostController.jsonFindBlogPostsByCreated(@RequestParam("created") @DateTimeFormat(style = "M-") Date created) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(BlogPost.toJsonArray(BlogPost.findBlogPostsByCreated(created).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByTitleLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> BlogPostController.jsonFindBlogPostsByTitleLike(@RequestParam("title") String title) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(BlogPost.toJsonArray(BlogPost.findBlogPostsByTitleLike(title).getResultList()), headers, HttpStatus.OK);
    }
    
}
